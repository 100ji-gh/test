name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer:v2
          coverage: none
          extensions: mbstring, intl, zip, dom, curl, sqlite3, pdo_sqlite

      - name: Configure Composer allow-plugins
        run: |
          composer config --no-plugins allow-plugins.composer/installers true
          composer config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
          composer config --no-plugins allow-plugins.johnpbloch/wordpress-core-installer true

      - name: Get Composer cache dir
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> "$GITHUB_OUTPUT"

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install deps
        run: composer install --no-interaction --prefer-dist --no-progress

      # ── ここから下は既存の“SQLiteでWPテスト”前提（MySQLは使いません） ──
      - name: Ensure wp-tests-config.php (vendor WordPress を自動検出)
        run: |
          set -e
          php -r '
            $root = getenv("GITHUB_WORKSPACE") ?: __DIR__;
            $cands = [
              $root."/wordpress/",
              $root."/vendor/johnpbloch/wordpress-core/wordpress/",
              $root."/vendor/johnpbloch/wordpress/",
            ];
            $found = null;
            foreach ($cands as $x) { if (file_exists($x."wp-settings.php")) { $found = $x; break; } }
            if (!$found) { fwrite(STDERR, "[wp-tests-config] WordPress core not found\n"); exit(1); }
            $cfg = "<?php\n"
              ."if(!defined(\"ABSPATH\"))define(\"ABSPATH\",\"".$found."\");\n"
              ."if(!defined(\"WP_CONTENT_DIR\"))define(\"WP_CONTENT_DIR\",ABSPATH.\"wp-content\");\n"
              ."if(!defined(\"WP_TESTS_DOMAIN\"))define(\"WP_TESTS_DOMAIN\",\"example.org\");\n"
              ."if(!defined(\"WP_TESTS_EMAIL\"))define(\"WP_TESTS_EMAIL\",\"admin@example.org\");\n"
              ."if(!defined(\"WP_TESTS_TITLE\"))define(\"WP_TESTS_TITLE\",\"Test Site\");\n"
              ."if(!defined(\"WP_PHP_BINARY\"))define(\"WP_PHP_BINARY\",\"php\");\n"
              ."define(\"DB_NAME\",\"wptests\");\n"
              ."define(\"DB_USER\",\"root\");\n"
              ."define(\"DB_PASSWORD\",\"\");\n"
              ."define(\"DB_HOST\",\"localhost\");\n"
              ."define(\"DB_CHARSET\",\"utf8\");\n"
              ."define(\"DB_COLLATE\",\"\");\n"
              ."\$table_prefix=\"wptests_\";\n";
            file_put_contents($root."/wp-tests-config.php", $cfg);
          '

      - name: PHPCS
        run: |
          if [ -x vendor/bin/phpcs ]; then
            set -e
            paths=""
            for d in includes src lib app; do [ -d "$d" ] && paths="$paths $d"; done
            shopt -s nullglob; for f in *.php; do [ "$f" != "wp-tests-config.php" ] && paths="$paths $f"; done
            if [ -z "$(echo "$paths" | tr -d ' ')" ]; then echo "No PHP sources to sniff; skipping"; exit 0; fi
            vendor/bin/phpcs \
              --standard=WordPress-Extra \
              --extensions=php \
              --ignore=vendor/*,tests/*,tests/wordpress/*,tmp/*,.github/*,node_modules/*,wp-content/* \
              --warning-severity=0 \
              $paths
          else
            echo "phpcs not installed; skipping"
          fi

      - name: PHPStan
        run: |
          if [ -x vendor/bin/phpstan ]; then
            vendor/bin/phpstan analyse -c phpstan.neon
          else
            echo "phpstan not installed; skipping"
          fi

      - name: PHPUnit
        env:
          WP_PHPUNIT__DIR: ${{ github.workspace }}/vendor/wp-phpunit/wp-phpunit
          WP_PHPUNIT__TESTS_CONFIG: ${{ github.workspace }}/wp-tests-config.php
          WP_PHP_BINARY: php
        run: vendor/bin/phpunit -c phpunit.xml.dist
