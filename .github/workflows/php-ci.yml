name: PHP CI

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "feature/**" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [ '8.2' ]
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          tools: composer:v2
          coverage: none
          extensions: mbstring, intl, zip, dom, curl, json, sqlite3

      - name: Configure Composer allow-plugins
        run: |
          composer config --no-plugins allow-plugins.composer/installers true
          composer config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true
          composer config --no-plugins allow-plugins.johnpbloch/wordpress-core-installer true

      - name: Get Composer cache dir
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install deps
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Ensure WPCS standard
        run: composer require wp-coding-standards/wpcs:^3 --no-interaction --prefer-dist || true

      # SQLite ドロップインを用意
      - name: Ensure SQLite driver (composer or fallback)
        run: |
          set -e
          if ! test -f vendor/aaemnnosttv/wp-sqlite-db/src/db.php; then
            composer require aaemnnosttv/wp-sqlite-db:^1.3 --no-interaction --prefer-dist || true
          fi
          if ! test -f vendor/aaemnnosttv/wp-sqlite-db/src/db.php; then
            echo "[fallback] raw fetch"
            mkdir -p vendor/aaemnnosttv/wp-sqlite-db/src
            curl -sSLo vendor/aaemnnosttv/wp-sqlite-db/src/db.php \
              https://raw.githubusercontent.com/aaemnnosttv/wp-sqlite-db/v1.3.2/src/db.php
          fi
          test -f vendor/aaemnnosttv/wp-sqlite-db/src/db.php || (echo "db.php still missing"; exit 1)

      # 主要候補すべてに db.php を配置（どの ABSPATH でも拾えるように）
      - name: Place SQLite drop-in to possible wp-content dirs
        run: |
          set -e
          SRC="vendor/aaemnnosttv/wp-sqlite-db/src/db.php"
          for dest in \
            "$GITHUB_WORKSPACE/wordpress/wp-content" \
            "$GITHUB_WORKSPACE/wp/wp-content" \
            "$GITHUB_WORKSPACE/vendor/johnpbloch/wordpress-core/wordpress/wp-content" \
            "$GITHUB_WORKSPACE/vendor/johnpbloch/wordpress/wp-content" \
            "$GITHUB_WORKSPACE/tests/wordpress/wp-content"
          do
            mkdir -p "$dest"
            cp "$SRC" "$dest/db.php" || true
          done

      - name: Prepare temp dirs
        run: |
          mkdir -p tmp
          chmod -R 777 tmp

      # WP テスト用設定：WPコアの場所を自動検出して ABSPATH を決定（定数は ifndef で定義）
      - name: Create wp-tests-config.php (auto-detect ABSPATH)
        run: |
          set -e
          ROOT="$GITHUB_WORKSPACE"
          write_cfg() {
            path="$1"
            mkdir -p "$(dirname "$path")"
            cat > "$path" <<'PHP'
<?php
$root = getenv('GITHUB_WORKSPACE') ?: __DIR__;
$paths = [
  $root . '/wordpress/',
  $root . '/wp/',
  $root . '/vendor/johnpbloch/wordpress-core/wordpress/',
  $root . '/vendor/johnpbloch/wordpress/',
];
$found = null;
foreach ($paths as $p) {
  if (file_exists($p . 'wp-settings.php')) { $found = $p; break; }
}
if (!$found) { fwrite(STDERR, "[wp-tests-config] Could not locate WordPress core.\n"); exit(1); }

if (!defined('ABSPATH'))        define('ABSPATH', $found);
if (!defined('WP_CONTENT_DIR')) define('WP_CONTENT_DIR', ABSPATH . 'wp-content');

if (!defined('WP_TESTS_DOMAIN')) define('WP_TESTS_DOMAIN', 'example.org');
if (!defined('WP_TESTS_EMAIL'))  define('WP_TESTS_EMAIL',  'admin@example.org');
if (!defined('WP_TESTS_TITLE'))  define('WP_TESTS_TITLE',  'Test Site');
if (!defined('WP_PHP_BINARY'))   define('WP_PHP_BINARY',   'php');

define('DB_NAME',     'wptests');
define('DB_USER',     'root');
define('DB_PASSWORD', '');
define('DB_HOST',     'localhost');
define('DB_CHARSET',  'utf8');
define('DB_COLLATE',  '');

$table_prefix = 'wptests_';
PHP
            echo "wrote $path"
          }
          write_cfg "$ROOT/wp-tests-config.php"
          write_cfg "$ROOT/tests/wp-tests-config.php"
          write_cfg "$ROOT/tests/phpunit/wp-tests-config.php"

      # PHPCS：ソースのみ（設定・vendor等は除外）
      - name: PHPCS (scoped to source only)
        run: |
          if [ -x vendor/bin/phpcs ]; then
            set -e
            paths=""
            for d in includes src lib app; do [ -d "$d" ] && paths="$paths $d"; done
            root_files=$(find . -maxdepth 1 -type f -name '*.php' \
              ! -name 'wp-tests-config.php' \
              ! -name 'ci-prepend.php' \
              -printf '%P\n' | xargs -r echo)
            paths="$paths $root_files"
            if [ -z "$(echo $paths | tr -d ' ')" ]; then echo "No PHP sources to sniff; skipping"; exit 0; fi
            echo "PHPCS targets:$paths"
            vendor/bin/phpcs \
              --standard=WordPress-Extra \
              --extensions=php \
              --ignore=vendor/*,tests/*,tests/wordpress/*,tmp/*,.git/*,.github/*,node_modules/*,wp-content/* \
              --warning-severity=0 \
              $paths
          else
            echo "phpcs not installed; skipping"
          fi

      # PHPStan：あなたのソースだけ解析（CI 用ミニ設定）
      - name: PHPStan (scoped & CI config)
        run: |
          if [ -x vendor/bin/phpstan ]; then
            set -e
            {
              echo 'parameters:'
              echo '  level: 6'
              echo '  treatPhpDocTypesAsCertain: false'
              echo '  checkMissingIterableValueType: false'
              echo '  paths: []'
              echo '  excludePaths:'
              echo '    analyse:'
              echo '      - vendor/*'
              echo '      - tests/*'
              echo '      - tests/wordpress/*'
              echo '      - tmp/*'
              echo '      - .github/*'
              echo '      - wp-content/*'
              echo '      - node_modules/*'
            } > phpstan-ci.neon
            paths=""
            for d in includes src lib app; do [ -d "$d" ] && paths="$paths $d"; done
            root_files=$(find . -maxdepth 1 -type f -name '*.php' \
              ! -name 'wp-tests-config.php' \
              ! -name 'ci-prepend.php' \
              -printf '%P\n' | xargs -r echo)
            paths="$paths $root_files"
            if [ -z "$(echo $paths | tr -d ' ')" ]; then echo "No PHP sources to analyse; skipping"; exit 0; fi
            echo "PHPStan targets:$paths"
            vendor/bin/phpstan analyse --no-progress --configuration=phpstan-ci.neon $paths
          else
            echo "phpstan not installed; skipping"
          fi

      # を安全に：定数だけを最速で定義（二重定義は ifndef で回避）
      - name: Create CI prepend (defines only)
        run: |
          set -e
          cat > "$GITHUB_WORKSPACE/ci-prepend.php" <<'PHP'
<?php
if (!defined('WP_TESTS_DOMAIN')) define('WP_TESTS_DOMAIN', 'example.org');
if (!defined('WP_TESTS_EMAIL'))  define('WP_TESTS_EMAIL',  'admin@example.org');
if (!defined('WP_TESTS_TITLE'))  define('WP_TESTS_TITLE',  'Test Site');
if (!defined('WP_PHP_BINARY'))   define('WP_PHP_BINARY',   'php');
PHP
          echo "wrote $GITHUB_WORKSPACE/ci-prepend.php"

      - name: PHPUnit
        env:
          WP_PHP_BINARY: php
          WP_PHPUNIT__DIR: ${{ github.workspace }}/vendor/wp-phpunit/wp-phpunit
          WP_PHPUNIT__TESTS_CONFIG: ${{ github.workspace }}/wp-tests-config.php
        run: |
          set -e
          test -f "$GITHUB_WORKSPACE/wp-tests-config.php" || { echo "wp-tests-config.php missing"; exit 1; }
          test -f "$GITHUB_WORKSPACE/ci-prepend.php" || { echo "ci-prepend.php missing"; exit 1; }
          php -d auto_prepend_file="$GITHUB_WORKSPACE/ci-prepend.php" \
            vendor/bin/phpunit -c phpunit.xml.dist
