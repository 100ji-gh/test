name: PHP CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  php:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: sqlite3, pdo_sqlite
          tools: composer:v2
          coverage: none

      - name: Composer install (with plugins allowed)
        run: |
          set -e
          composer config --no-plugins allow-plugins.composer/installers true
          composer install --no-interaction --prefer-dist --no-progress

      - name: Prepare WordPress core & wp-tests-config.php (SQLite)
        run: |
          set -e

          # 0) 既に ./wordpress があるなら何もしない
          if [ -f wordpress/wp-settings.php ]; then
            echo "Core already present at ./wordpress"
          else
            # 1) 必要パッケージを導入（core と SQLite ドロップイン）
            composer require --no-interaction --prefer-dist \
              johnpbloch/wordpress-core:^6.8 \
              aaemnnosttv/wp-sqlite-db:^1.3

            # 2) WordPress コアの実体を特定（直下 or /wordpress 配下の両方に対応）
            WP_SRC=""
            for d in \
              wordpress \
              vendor/johnpbloch/wordpress-core/wordpress \
              vendor/johnpbloch/wordpress-core \
              vendor/johnpbloch/wordpress \
              vendor/wordpress/wordpress
            do
              if [ -f "$d/wp-settings.php" ]; then
                WP_SRC="$d"
                break
              fi
            done

            if [ -z "$WP_SRC" ]; then
              echo "FATAL: WordPress core not found after composer install"
              find . -maxdepth 4 -type f -name wp-settings.php || true
              exit 1
            fi

            # 3) ./wordpress を WP_SRC に向ける（WP_SRC が ./wordpress 以外のときのみ）
            if [ "$WP_SRC" = "wordpress" ]; then
              echo "WordPress is already at ./wordpress"
            else
              rm -rf wordpress
              ln -s "$PWD/$WP_SRC" wordpress || (rm -rf wordpress && cp -a "$WP_SRC" wordpress)
            fi

            # 最終確認
            test -f wordpress/wp-settings.php
          fi

          # 4) SQLite ドロップイン(db.php)を探索して ./wordpress/wp-content に配置
          mkdir -p wordpress/wp-content
          DB_SRC=""
          for f in \
            vendor/aaemnnosttv/wp-sqlite-db/src/db.php \
            vendor/aaemnnosttv/wp-sqlite-db/db.php \
            wordpress/wp-content/plugins/wp-sqlite-db/db.php \
            wp-content/plugins/wp-sqlite-db/db.php
          do
            if [ -f "$f" ]; then DB_SRC="$f"; break; fi
          done
          if [ -z "$DB_SRC" ]; then
            DB_SRC=$(find . -maxdepth 6 -type f -name db.php -path "*/wp-sqlite-db/*" | head -n1 || true)
          fi
          if [ -z "$DB_SRC" ]; then
            echo "FATAL: SQLite drop-in missing (wp-sqlite-db/db.php not found)"
            find . -maxdepth 6 -type f -name db.php -path "*/wp-sqlite-db/*" || true
            exit 1
          fi
          cp -f "$DB_SRC" wordpress/wp-content/db.php
          echo "SQLite drop-in: $DB_SRC -> wordpress/wp-content/db.php"

          # 5) データディレクトリ（SQLite DB の置き場）
          mkdir -p tmp
          chmod -R 777 tmp

          # 6) wp-tests-config.php を生成（ABSPATH を実体に合わせる）
          php -r '
            $root  = getenv("GITHUB_WORKSPACE") ?: getcwd();
            $wpdir = $root . "/wordpress/";
            if (!is_dir($wpdir) || !file_exists($wpdir."wp-settings.php")) {
              fwrite(STDERR, "[wp-tests-config] wordpress missing\n");
              exit(1);
            }
            $cfg  = "<?php\n";
            $cfg .= "if(!defined(\"ABSPATH\"))define(\"ABSPATH\",\"{$wpdir}\");\n";
            $cfg .= "if(!defined(\"WP_CONTENT_DIR\"))define(\"WP_CONTENT_DIR\",ABSPATH.\"wp-content\");\n";
            $cfg .= "if(!defined(\"WP_TESTS_DOMAIN\"))define(\"WP_TESTS_DOMAIN\",\"example.org\");\n";
            $cfg .= "if(!defined(\"WP_TESTS_EMAIL\"))define(\"WP_TESTS_EMAIL\",\"admin@example.org\");\n";
            $cfg .= "if(!defined(\"WP_TESTS_TITLE\"))define(\"WP_TESTS_TITLE\",\"Test Site\");\n";
            $cfg .= "if(!defined(\"WP_PHP_BINARY\"))define(\"WP_PHP_BINARY\",\"php\");\n";
            // SQLite 明示（ドロップイン既定でも動くが、揺らぎ防止）
            $cfg .= "if(!defined(\"DB_DIR\"))define(\"DB_DIR\",\"{$root}/tmp/\");\n";
            $cfg .= "if(!defined(\"DB_FILE\"))define(\"DB_FILE\",\"wptests.sqlite\");\n";
            // WordPress 慣例の定義（SQLite では実質未使用）
            $cfg .= "define(\"DB_NAME\",\"wptests\");\n";
            $cfg .= "define(\"DB_USER\",\"root\");\n";
            $cfg .= "define(\"DB_PASSWORD\",\"\");\n";
            $cfg .= "define(\"DB_HOST\",\"localhost\");\n";
            $cfg .= "define(\"DB_CHARSET\",\"utf8\");\n";
            $cfg .= "define(\"DB_COLLATE\",\"\");\n";
            $cfg .= "$". "table_prefix=\"wptests_\";\n";
            file_put_contents($root . "/wp-tests-config.php", $cfg);
          '
          echo "Prepared ./wordpress + wp-tests-config.php + SQLite drop-in"

      - name: PHPCS (WordPress-Extra)
        run: |
          set -e
          if [ -x vendor/bin/phpcs ]; then
            paths=""
            for d in includes src lib app; do [ -d "$d" ] && paths="$paths $d"; done
            root_files=$(find . -maxdepth 1 -type f -name '*.php' \
              ! -name 'wp-tests-config.php' \
              ! -name 'ci-prepend.php' \
              -printf '%P\n' | xargs -r echo)
            paths="$paths $root_files"
            if [ -z "$(echo "$paths" | tr -d ' ')" ]; then
              echo "No PHP sources to sniff; skipping"; exit 0
            fi
            echo "PHPCS targets:$paths"
            vendor/bin/phpcs \
              --standard=WordPress-Extra \
              --extensions=php \
              --ignore=vendor/*,tests/*,tests/wordpress/*,tmp/*,.git/*,.github/*,node_modules/*,wp-content/* \
              --warning-severity=0 \
              $paths
          else
            echo "phpcs not installed; skipping"
          fi

      - name: PHPStan
        run: |
          set -e
          if [ -x vendor/bin/phpstan ]; then
            if [ -f phpstan.neon ]; then
              vendor/bin/phpstan analyse --no-progress -c phpstan.neon || exit 1
            else
              {
                echo "parameters:"
                echo "  level: 6"
                echo "  treatPhpDocTypesAsCertain: false"
                echo "  paths: []"
                echo "  excludePaths:"
                echo "    analyse:"
                echo "      - vendor/*"
                echo "      - tests/*"
                echo "      - tmp/*"
                echo "      - .github/*"
                echo "      - wp-content/*"
              } > phpstan-ci.neon
              paths=""
              for d in includes src lib app; do [ -d "$d" ] && paths="$paths $d"; done
              root_files=$(find . -maxdepth 1 -type f -name '*.php' -printf '%P\n' | xargs -r echo)
              paths="$paths $root_files"
              if [ -z "$(echo "$paths" | tr -d ' ')" ]; then
                echo "No PHP sources to analyse; skipping"; exit 0
              fi
              echo "PHPStan targets:$paths"
              vendor/bin/phpstan analyse --no-progress -c phpstan-ci.neon $paths
            fi
          else
            echo "phpstan not installed; skipping"
          fi

      - name: PHPUnit
        env:
          WP_PHPUNIT__DIR: ${{ github.workspace }}/vendor/wp-phpunit/wp-phpunit
          WP_PHPUNIT__TESTS_CONFIG: ${{ github.workspace }}/wp-tests-config.php
          WP_PHP_BINARY: php
        run: |
          set -e
          vendor/bin/phpunit -c phpunit.xml.dist
